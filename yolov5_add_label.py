# -*- coding: utf-8 -*-
"""Yolov5 add label.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t3cj0af80qMhGHZhEPuXSu2_DQKj9Dj-
"""

from google.colab import drive
drive.mount('/content/gdrive')

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import os
for dirname, _, filenames in os.walk('/content/gdrive/MyDrive/face_mask_detection'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import os 
import numpy

os.mkdir("/content/gdrive/MyDrive/face_mask/train_data")
os.mkdir("/content/gdrive/MyDrive/face_mask/train_data/images")
os.mkdir("/content/gdrive/MyDrive/face_mask/train_data/labels")
os.mkdir("/content/gdrive/MyDrive/face_mask/train_data/images/train")
os.mkdir("/content/gdrive/MyDrive/face_mask/train_data/images/val")
os.mkdir("/content/gdrive/MyDrive/face_mask/train_data/labels/train")
os.mkdir("/content/gdrive/MyDrive/face_mask/train_data/labels/val")

#Convert xml files to txt files

import xml.etree.ElementTree as ET
from xml.dom.minidom import parse

path = "/content/gdrive/MyDrive/face_mask_detection/annotations"
classes = {"with_mask":0,"without_mask":1,"mask_weared_incorrect":2}

for annotations in os.listdir(path):
    
    
    dom = parse(os.path.join(path,annotations))
    root = dom.documentElement
    filename = ".txt".join(root.getElementsByTagName("filename")[0].childNodes[0].data.split(".png"))

    image_width = root.getElementsByTagName("width")[0].childNodes[0].data
    image_height = root.getElementsByTagName("height")[0].childNodes[0].data
    with open("/content/gdrive/MyDrive/face_mask/train_data/labels/train/"+filename,"w") as r:
        
        for items in root.getElementsByTagName("object") :
           name = items.getElementsByTagName("name")[0].childNodes[0].data
           xmin = items.getElementsByTagName("xmin")[0].childNodes[0].data
           ymin = items.getElementsByTagName("ymin")[0].childNodes[0].data
           xmax = items.getElementsByTagName("xmax")[0].childNodes[0].data
           ymax = items.getElementsByTagName("ymax")[0].childNodes[0].data
           x_center_norm = ((int(xmin)+int(xmax)) / 2 ) / int(image_width)
           y_center_norm = ((int(ymin)+int(ymax))/2) / int(image_height)
           width_norm = ((int(xmax)-int(xmin))/int(image_width))
           height_norm = ((int(ymax)-int(ymin))/int(image_height))

           r.write(str(classes[name]))
           r.write(" ")
           r.write(str(x_center_norm))
           r.write(" ")
           r.write(str(y_center_norm))
           r.write(" ")
           r.write(str(width_norm))
           r.write(" ")
           r.write(str(height_norm))
           r.write("\n")

#Check if we created same amount of txt files as xml files that are in annotations

len(os.listdir("/content/gdrive/MyDrive/face_mask/train_data/labels/train/")) == len(os.listdir("/content/gdrive/MyDrive/face_mask_detection/images"))

#Copy images to train_data/images/train folder

import shutil
path = "/content/gdrive/MyDrive/face_mask_detection/images"
for images in os.listdir(path):
    image_path = os.path.join(path,images)
    shutil.copy(image_path,"/content/gdrive/MyDrive/face_mask/train_data/images/train/"+images)

#Check if images are equal to labels

len(os.listdir("/content/gdrive/MyDrive/face_mask/train_data/images/train/")) == len(os.listdir("/content/gdrive/MyDrive/face_mask/train_data/labels/train/"))

#Shuffle and move to val folders to create train-val split

from random import shuffle
from glob import glob
import random
import shutil

random.seed(42)
files = glob("/content/gdrive/MyDrive/face_mask/train_data/images/train/*.png")
shuffle(files)
txt_train_path = "/content/gdrive/MyDrive/face_mask/train_data/labels/train/"
img_train_path = "/content/gdrive/MyDrive/face_mask/train_data/images/train/"
txt_val_path = "/content/gdrive/MyDrive/face_mask/train_data/labels/val/"
img_val_path = "/content/gdrive/MyDrive/face_mask/train_data/images/val/"

for i in files[:177]:
    filename = i.split("/")[-1]
    shutil.move(txt_train_path+filename.replace(".png",".txt"),txt_val_path+filename.replace(".png",".txt"))
    shutil.move(img_train_path+filename,img_val_path+filename)

#Check if val labels and val images are equal

len(os.listdir("/content/gdrive/MyDrive/face_mask/train_data/labels/val/")) == len(os.listdir("/content/gdrive/MyDrive/face_mask/train_data/images/val/"))

#Create data.yaml file that points to our dataset in a primitive way

with open("/content/gdrive/MyDrive/face_mask/data.yaml","w") as f:
    f.write("train: ")
    f.write("/content/gdrive/MyDrive/face_mask/train_data/images/train")
    f.write("\n")
    f.write("val: ")
    f.write("/content/gdrive/MyDrive/face_mask/train_data/images/val")
    f.write("\n")
    f.write("nc: ")
    f.write(" 3")
    f.write("\n")
    f.write("names: ")
    f.write(" ['with_mask','without_mask','mask_weared_incorrect']")

with open("/content/gdrive/MyDrive/face_mask/data.yaml","r") as f:
    print(f.read())

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/face_mask/train_data/labels/train
!ls -F | grep .txt | wc -l
# %cd ..

# %cd /content/gdrive/MyDrive/face_mask/train_data/labels/val
!ls -F | grep .txt | wc -l
# %cd ..

# %cd /content/gdrive/MyDrive/face_mask/train_data/images/train
!ls -F | grep .png | wc -l
# %cd ..

# %cd /content/gdrive/MyDrive/face_mask/train_data/images/val
!ls -F | grep .png | wc -l
# %cd ..

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/face_mask

# clone Yolov5 repo
!git clone https://github.com/ultralytics/yolov5

# Commented out IPython magic to ensure Python compatibility.
# %cd yolov5

!pip install -r requirements.txt

!nvidia-smi

import torch
torch.cuda.is_available()
# Output would be True if Pytorch is using GPU otherwise it would be False.

#train

!python train.py --img 640 --batch 32 --epochs 100 --data /content/gdrive/MyDrive/face_mask/data.yaml --weights yolov5s.pt --cache

# display detected images
from IPython.display import Image
Image('/content/gdrive/MyDrive/face_mask/yolov5/runs/train/exp2/val_batch1_pred.jpg')

#download image
!wget https://cdn.abcotvs.com/dip/images/6251257_061620-kgo-maskwear-img_Image_00-00-37,26.jpg?w=1600

!python detect.py --source "/content/gdrive/MyDrive/face_mask/yolov5/76176408.jpg" --weights '/content/gdrive/MyDrive/face_mask/yolov5/runs/train/exp2/weights/best.pt'

Image("/content/gdrive/MyDrive/face_mask/yolov5/runs/detect/exp3/gettyimages-1215069129_jacoblund.png")

Image("/content/gdrive/MyDrive/face_mask/yolov5/runs/detect/exp4/42169.jpg")

Image("/content/gdrive/MyDrive/face_mask/yolov5/runs/detect/exp8/test.jpg")

Image("/content/gdrive/MyDrive/face_mask/yolov5/runs/detect/exp9/3000.jpg")

Image("/content/gdrive/MyDrive/face_mask/yolov5/runs/detect/exp10/76176408.jpg")